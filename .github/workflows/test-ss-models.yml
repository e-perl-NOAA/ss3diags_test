## Workflow to test ss3diags functions on test models

# Extra run of r4ss tests, when exe and models in test-models are available.workflow_call
# stored in this repo because only applicable to ss3 (and in particular r4ss)

on:
  workflow_call:
    inputs:
      run-codecov:
        required: false
        type: boolean
        default: false

name: run-test-ss-models
jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: ubuntu-latest, r: 'release', rspm: 'https://packagemanager.rstudio.com/cran/__linux__/focal/latest'}
    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.config.r }}

      - uses: r-lib/actions/setup-pandoc@master

      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Cache R packages
        if: runner.os != 'Windows'
        uses: actions/cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Install system dependencies
        if: runner.os == 'Linux'
        run: |
          while read -r cmd
          do
            eval sudo $cmd
          done < <(Rscript -e 'writeLines(remotes::system_requirements("ubuntu", "20.04"))')
      - name: Install dependencies
        run: |
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran("devtools")
        shell: Rscript {0}

      - name: Get repository of SS models
        uses: actions/checkout@v2
        with:
          repository: 'nmfs-stock-synthesis/test-models'
          path: test-models-repo

      - name: move the models to the desired location
        run: |
          mkdir inst/extdata
          mv test-models-repo/models inst/extdata
          rm  -rf test-models-repo
          ls inst/extdata

      - name: Get the latest SS3 executable and move to expected location
        run: |
          curl https://api.github.com/repos/nmfs-stock-synthesis/stock-synthesis/releases/latest | grep "browser_download_url" | grep -Eo 'https://[^\"]*' | grep "ss_linux" | xargs wget
          mv ss_linux ss
          sudo chmod a+x ss
          cp ss inst/extdata/simple_3.30.12/ss
          cp ss inst/extdata/simple_3.30.13/ss
          rm ss
        
      - name: run models
        run: |
          mod_names <- list.dirs(file.path("test-models-repo", "model_runs"), full.names = FALSE, recursive = FALSE)
          mod_paths <- list.dirs(file.path("test-models-repo", "model_runs"), full.names = TRUE, recursive = FALSE)
          print(mod_names)
          run_ss <- function(dir) {
            wd <- getwd()
            print(wd)
            on.exit(system(paste0("cd ", wd)))
            # rename the reference files
            file.rename(file.path(dir, "ss_summary.sso"),
                        file.path(dir, "ss_summary_ref.sso"))
            file.rename(file.path(dir, "warning.sso"),
                        file.path(dir, "warning_ref.sso"))
            file.copy(file.path(dir, "ss.par"), file.path(dir, "ss_ref.par"))
            # run the models with estimation and see if model finishes without error
            message("running ss on ", basename(dir))
            system(paste0("cd ", dir, " && ../ss -nox"))
            model_ran <- file.exists(file.path(dir, "control.ss_new"))
            return(model_ran)
          }
          mod_ran <- lapply(mod_paths, function(x) tryCatch(run_ss(x),
                                                   error = function(e) print(e)
                                                   ))